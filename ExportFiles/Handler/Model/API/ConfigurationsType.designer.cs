//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TFlex.DOCs.References.Configurations
{
	using System;
	using TFlex.DOCs.Model.References;
	using TFlex.DOCs.Model.Classes;
	
	
	/// <summary>
	/// Представляет описание типа объекта справочника "Конфигурационный справочник"
	/// </summary>
	public partial class ConfigurationsType
	{
		
		internal ConfigurationsType(ConfigurationsTypes owner) : 
				base(owner)
		{
		}
		
		/// <summary>
		/// Возвращает типы объектов справочника "Конфигурационный справочник"
		/// </summary>
		public new ConfigurationsTypes Classes
		{
			get
			{
				return ((ConfigurationsTypes)(base.Classes));
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Конфигурация" или порождён от него
		/// </summary>
		public bool IsConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.Config);
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Массив" или порождён от него
		/// </summary>
		public bool IsArrayConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.ArrayConfig);
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Параметр" или порождён от него
		/// </summary>
		public bool IsParameterConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.ParameterConfig);
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Логический" или порождён от него
		/// </summary>
		public bool IsLogicalParameterConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.LogicalParameterConfig);
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Строковый" или порождён от него
		/// </summary>
		public bool IsStringlParameterConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.StringlParameterConfig);
			}
		}
		
		/// <summary>
		/// Возвращает true, если текущий экземпляр описывает тип "Числовой" или порождён от него
		/// </summary>
		public bool IsNumberParameterConfig
		{
			get
			{
				return IsInherit(ConfigurationsTypes.Keys.NumberParameterConfig);
			}
		}
	}
}
